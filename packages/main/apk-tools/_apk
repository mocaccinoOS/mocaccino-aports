#compdef apk

function _apk {

	local -a global_opts=(
		"(-h --help)"{-h,--help}"[Print help information]"
		"(-i --interactive)"{-i,--interactive}"[Ask confirmation before performing certain operations]"
		"(-p --root)"{-p,--root}"[Manage file system at ROOT]"
		"(-q --quiet)"{-q,--quiet}"[Print less information]"
		"(-U --update-cache)"{-U,--update-cache}"[Alias for '--cache-max-age 1']"
		"(-v --verbose)"{-v,--verbose}"[Print more information]"
		"(-V --version)"{-V,--version}"[Print program version and exit]"
		"(-X --repository)"{-X,--repository}"[Specify additional package repository]:repository:_host"
		"--allow-untrusted[Install packages with untrusted signature or no signature]"
		"--arch[Temporarily override architecture]:arch:(armhf mips64 s390x x86_64 x86 aarch64 ppc64le armv7)"
		"--cache-dir[Temporarily override the cache directory]:directory:_dir_list"
		"--cache-max-age[Maximum age for index in cache before it's refreshed]:minutes"
		"--force-binary-stdout[Continue even if binary data will be printed to the terminal]"
		"--force-broken-world[Continue even if world cannot be satisfied]"
		"--force-non-repository[Continue even if packages may be lost on reboot]"
		"--force-old-apk[Continue even if packages use unsupported features]"
		"--force-overwrite[Overwrite files in other packages]"
		"--force-refresh[Do not use cached files]"
		"--keys-dir[Override directory of trusted keys]:directory:_dir_list"
		"--no-cache[Do not use any local cache path]"
		"--no-network[Do not use the network]"
		"--no-progress[Disable progress bar even for TTYs]"
		"--print-arch[Print default arch and exit]"
		"--progress[Show progress]"
		"--progress-fd[Write progress to the specified file descriptor]:file descriptor"
		"--purge[Delete modified configuration files or uninstalled packages from cache]"
		"--repositories-file[Override system repositories]:repository file:_files"
		"--wait[Wait to get an exclusive repository lock before failing]:seconds"
	)

	local -a commit_opts=(
		"(-s --simulate)"{-s,--simulate}"[Simulate the requested operation without making any changes]"
		"--clean-protected[Do not create .apk-new files in configuration directories]"
		"--overlay-from-stdin[Read list of overlay files from stdin]"
		"--no-scripts[Do not execute any scripts]"
		"--no-commit-hooks[Skip pre/post hook scripts]"
		"--initramfs-diskless-boot[Enables selected force options, disables commit hooks and more]"
	)

	local -a latest_opt=("(-l --latest)"{-l,--latest}"[Always choose the latest package by version]")
	local -a upgrade_opt=("(-u --upgrade)"{-u,--upgrade}"[Upgrade packages and it's dependencies]")

	local context state state_descr line
	typeset -A opt_args
	local curcontext="$curcontext"
	local ret=1

	function _ccache_apk_world { [[ ~/.zshcompcache/apk_index_packages_installed -ot /etc/apk/world ]] }

	# TODO: Add _ccache_apk_avail for available packages, some systems don't have a package cache
	#       so there's a bit of work for that. apk is still pretty quick so this is not necessary

	function _apk_available_pkgs {
		local -a packs
		local IFS=$'\n'
		packs=(${$(/sbin/apk list -a)%-[[:digit:][:lower:]._]##-r[[:digit:]]## * \{*\} (*)})
		_describe 'available packages' packs
	}

	function _apk_installed_pkgs {
		local -a packs
		zstyle ":completion:${curcontext}:" cache-policy _ccache_apk_world
		local IFS=$'\n'
		if _cache_invalid apk_index_packages_installed || ! _retrieve_cache apk_index_packages_installed; then
			packs=(${$(/sbin/apk list -I)%-[[:digit:][:lower:]._]##-r[[:digit:]]## * \{*\} (*)})
			_store_cache apk_index_packages_installed packs
		fi
		_describe 'installed packages' packs
	}

	function _apk_packages {
		_alternative 'repo:available packages:_apk_available_pkgs' 'localpkgs:local packages:_files -g "*.apk"'
	}

	function _apk_cache {
		local -a cache_subcmds=(
			"clean:Remove package files which are no longer necessary"
			"download:Fetch package files from the repositories and store them in the cache"
			"sync:Clean and Download"
		)
		_describe 'subcommand' cache_subcmds
	}

	function _apk_subcmds {
		local -a cmds=(
			"add:Add packages to world and commit changes"
			"del:Remove packages from world and commit changes"
			"fix:Fix, reinstall or upgrade packages without modifying world"
			"update:Update repository indexes"
			"upgrade:Install upgrades available from repositories"
			"cache:Manage the local package cache"
			"info:Give detailed information about packages or repositories"
			"list:List packages matching a pattern or other criteria"
			"dot:Render dependencies as graphviz graphs"
			"policy:Show repository policy for packages"
			"index:Create repository index file from packages"
			"fetch:Download packages from global repositories to a local directory"
			"manifest:Show checksums of package contents"
			"verify:Verify package integrity and signature"
			"audit:Audit system for changes"
			"stats:Show statistics about repositories and installations"
			"version:Compare package versions or perform tests on version strings"
		)
		_describe 'subcommand' cmds
	}

	function _apk_subcmd_args {
		local -a add_args=(
			$global_opts \
			$commit_opts \
			$latest_opt \
			$upgrade_opt \
			"--initdb[Initialize a new package database]" \
			"(-t --virtual)"{-t,--virtual}"[Create virtual package with given dependencies]" \
			"*::package:_apk_packages"
		)
		local -a del_args=(
			$global_opts \
			$commit_opts \
			"--rdepeds[Recursively delete all top-level reverse dependencies]" \
			"*::installed package:_apk_installed_pkgs"
		)
		local -a fix_args=(
			$global_opts \
			$commit_opts \
			"(-d --depends)"{-d,--depends}"[Fix dependencies of specified packages]" \
			"(-r --reinstall)"{-r,--reinstall}"[Reinstall packages]" \
			"(-u --upgrade)"{-u,--upgrade}"[Upgrade if an upgrade is available and does not break dependencies]" \
			"(-x --xattr)"{-x,--xattr}"[Fix packages with broken xattrs]" \
			"--directory-permissions[Reset all directory permissions]" \
			"*::package:_apk_packages"
		)
		local -a update_args=($global_opts $commit_opts)
		local -a upgrade_args=(
			$global_opts \
			$commit_opts \
			$latest_opt \
			"(-a --available)"{-a,--available}"[Reset all packages to versions available from current repositories]" \
			"--ignore[Upgrade all other packages than the ones listed]" \
			"--no-self-upgrade[Do not do an early upgrade of the 'apk-tools' package]" \
			"--prune[Remove packages which are no longer available from any configured repository]" \
			"--self-upgrade-only[Only perform a self-upgrade of the 'apk-tools' package]" \
			"*::package:_apk_packages"
		)
		local -a cache_args=(
			$global_opts \
			$latest_opt \
			$upgrade_opt \
			':subcommand:_apk_cache'
		)
		local -a info_args=(
			$global_opts \
			"(-a --all)"{-a,--all}"[List all information known about the package]" \
			"(-d --description)"{-d,--descripton}"[Print the package description]" \
			"(-e --installed)"{-e,--installed}"[Check package installed status]" \
			"(-L --contents)"{-L,--contents}"[List files included in the package]" \
			"(-i --install-if)"{-i,--install-if}"[List the package's install_if rule]" \
			"(-I --rinstall-if)"{-I,--rinstall-if}"[List other packages whose install_if rules refer to this package]" \
			"(-r --rdepends)"{-r,--rdepends}"[List reverse dependencies of the package]" \
			"(-R --depends)"{-R,--depends}"[List the dependencies of the package]" \
			"(-s --size)"{-s,--size}"[Print the package's installed size]" \
			"(-w --webpage)"{-w,--webpage}"[Print the URL for the package's upstream webpage]" \
			"(-W --who-owns)"{-W,--who-owns}"[Print the package which owns the specified file]:file:_files" \
			"--license[Print the package SPDX license identifier]" \
			"--replaces[List the other packages for which this package is marked as a replacement]" \
			"--triggers[Print active triggers for the package]" \
			"*::package:_apk_packages"
		)
		local -a list_args=(
			$global_opts \
			"(-I --installed)"{-I,--installed}"[Consider only installed packages]" \
			"(-O --orphaned)"{-O,--orphaned}"[Consider only orphaned packages]" \
			"(-a --available)"{-a,--available}"[Consider only available packages]" \
			"(-u --upgradeable)"{-u,--upgradeable}"[Consider only upgradable packages]" \
			"(-o --origin)"{-o,--origin}"[List packages by origin]" \
			"(-d --depends)"{-d,--depends}"[List packages by dependency]" \
			"(-P --providers)"{-P,--providers}"[List packages by provider]" \
			"*::pattern"
		)
		local -a dot_args=(
			$global_opts \
			"--errors[Consider only packages with errors]" \
			"--installed[Consider only installed packages]"
		)
		local -a policy_args=($global_opts)
		local -a index_args=(
			$global_opts \
			"(-d --description)"{-d,--description}"[Add a description to the index]:description" \
			"(-o --output)"{-o,--output}"[Output generated index to file]:output:_files" \
			"(-x --index)"{-x,--index}"[Read an existing index to speed up the creation of the new index]" \
			"--no-warnings[Disable warnings about missing dependencies]" \
			"*::package:_apk_packages"
		)
		local -a fetch_args=(
			$global_opts \
			"(-l --link)"{-l,--link}"[Create hard links if possible]" \
			"(-o --output)"{-o,--output}"[Where to write the downloaded files]:directory:_dir_list" \
			"(-r --recursive)"{-r,--recursive}"[Fetch packages and all of their dependencies]" \
			"(-s --stdout)"{-s,--stdout}"[Dump the .apk file(s) to stdout]" \
			"--simulate[Simulate the requested operation without making any changes]" \
			"*::package:_apk_packages"
		)
		local -a manifest_args=($global_opts "*::package:_apk_packages")
		local -a verify_args=($global_opts "*::package:_apk_packages")
		local -a audit_args=($global_opts "*::files:_files")
		local -a stats_args=($global_opts)
		local -a version_args=(
			$global_opts \
			"-a[Consider packages from all repository tags]" \
			"-l[Limit to packages with output matching given operand]:operand" \
			"*::package:_apk_packages"
		)
		local cmdvar="${words[1]}_args"
		_arguments -s -C ${(P)cmdvar} && ret=0
	}

	# Main arguments
	_arguments -C -s \
		$global_opts \
		':subcommand:_apk_subcmds' \
		'*::subcommand:_apk_subcmd_args' && ret=0

	return ret
}
